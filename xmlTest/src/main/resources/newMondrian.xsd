<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- region: processed elements -->

  <xs:element name="Schema" type="SchemaType"/>

  <xs:complexType name="SchemaType" >
    <xs:annotation>
      <xs:documentation>
        A schema is a collection of cubes and virtual cubes.
        It can also contain shared dimensions (for use by those
        cubes), named sets, roles, and declarations of
        user-defined functions.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this schema
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this schema.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="measuresCaption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Label for the measures dimension.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="defaultRole" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the default role for connections to this schema.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>

      <xs:element name="Parameter" type="ParameterType" minOccurs="0" maxOccurs="unbounded"/>

      <xs:element name="Dimension" type="DimensionType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Dimension available to be used by any cube of this schema.
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="Cube" type="CubeType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs="1" when on MondrianDef its optional -->

      <xs:element name="VirtualCube" type="VirtualCubeType" minOccurs="0" maxOccurs="unbounded"/>

      <xs:element name="NamedSet" type="NamedSetType" minOccurs="0" maxOccurs="unbounded"/>

      <xs:element name="Role" type="RoleType" minOccurs="0" maxOccurs="unbounded"/>

      <xs:element name="UserDefinedFunction" type="UserDefinedFunctionType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AnnotationsType">
    <xs:annotation>
      <xs:documentation>
        Contains values of user-defined properties.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Annotation" type="AnnotationType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs="1" when on MondrianDef its optional -->
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AnnotationType" mixed="true">
      <xs:attribute name="name" type="xs:string" minOccurs="0"/>
  </xs:complexType>

  <xs:complexType name="ParameterType">
    <xs:annotation>
      <xs:documentation>
        A Parameter defines a schema parameter. It can be referenced from an MDX
        statement using the ParamRef function and, if not final, its value can be overridden.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" default="String"> <!-- TODO this particular use case should be tested (using default value instead of required) but in principal MondrianDef should apply the default value -->
      <xs:annotation>
        <xs:documentation>
          Indicates the type of this parameter: String, Numeric, Integer,
          Boolean, Date, Time, Timestamp, or Member.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="String"/>
          <xs:enumeration value="Numeric"/>
          <xs:enumeration value="Integer"/>
          <xs:enumeration value="Boolean"/>
          <xs:enumeration value="Date"/>
          <xs:enumeration value="Time"/>
          <xs:enumeration value="Timestamp"/>
          <xs:enumeration value="Member"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>

    <xs:attribute name="modifiable" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          If false, statement cannot change the value of this parameter; the
          parameter becomes effectively constant (provided that its default
          value expression always returns the same value). Default is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Expression for the default value of this parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="DimensionType"> <!-- TODO DimensionType seems like an odd mixed bag of both shared and private dimension information. However that's how MondrianDef has it...  -->
    <xs:annotation>
      <xs:documentation>
        A Dimension is a collection of hierarchies. There are
        two kinds: a public dimension belongs to a
        Schema, and be used by several cubes; a
        private dimension belongs to a
        Cube. The foreignKey field is only
        applicable to private dimensions.
      </xs:documentation>
    </xs:annotation>

    <xs:complexContent>
      <xs:extension base="CubeDimensionType">

        <xs:attribute name="type" default="StandardDimension">
          <xs:annotation>
            <xs:documentation>
              The dimension's type may be one of "StandardDimension" or "TimeDimension".
              A time  dimension will allow the use of the MDX time functions
              (WTD, YTD, QTD, etc.). Use a standard dimension if the dimension
              is not a time-related dimension. The default value is "StandardDimension".
            </xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="StandardDimension"/>
              <xs:enumeration value="TimeDimension"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="usagePrefix">
          <xs:annotation>
            <xs:documentation>
              If present, then this is prepended to the Dimension column
              names during the building of collapse dimension aggregates
              allowing 1) different dimensions to be disambiguated
              during aggregate table recognition.
              This should only be set for private dimensions. <!-- TODO if this is only for private dimensions then probably hierarchical relation between xsd dimension types should change -->
            </xs:documentation>
          </xs:annotation>
        </xs:attribute >

        <xs:sequence>
          <xs:element name="Hierarchy" type="HierarchyType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs="1" when on MondrianDef its optional -->
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CubeDimensionType" abstract="true"> <!-- TODO validate abstract attribute. Element was named PrivateDimension in other XSD. Or maybe not... Might be -->
    <!-- TODO All Dimension Types need to be verified as they are a weird mix of attributes and elements  -->
    <xs:annotation>
      <xs:documentation>
        A CubeDimension is either a usage of a Dimension ('shared
        dimension', in MSOLAP parlance), or a 'private dimension'.
      </xs:documentation>
    </xs:annotation>

    <xs:attribute name="name" use="required"/>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the Dimension's name.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this dimension is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this dimension.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="foreignKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column in the fact table which joins
          to the leaf level of this dimension. Required in a
          private Dimension or a DimensionUsage, but not in a
          public Dimension.
        </xs:documentation> <!-- TODO if foreignKey is not required in a shared dimension then probably hierarchical relation between xsd dimension types should change -->
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="highCardinality" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>
          Flag to mark this dimension as a high cardinality one
          and avoid caching.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="HierarchyType">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
                Defines a hierarchy.
                You must specify at most one <Relation> or memberReaderClass.
                If you specify none, the hierarchy is assumed to come from the same
                fact table of the current cube.
                ]]>
      </xs:documentation>
    </xs:annotation>

    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the hierarchy. If this is not specified, the hierarchy
          has the same name as its dimension.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this hierarchy is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute> <!-- New -->
    <xs:attribute name="hasAll" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>
          Whether this hierarchy has an 'all' member.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allMemberName" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the 'all' member. If this attribute is not specified,
          the all member is named 'All hierarchyName', for example, 'All Store'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allMemberCaption" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead as the all member's name.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allLevelName" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the 'all' level. If this attribute is not specified, the all member is named '(All)'.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="primaryKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column which identifies members, and which is referenced by rows
          in the fact table. If not specified, the key of the lowest level is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="primaryKeyTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the table which contains primaryKey. If the hierarchy has only one table,
          defaults to that; otherwise it is required.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMember" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Default member of this hierarchy.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="memberReaderClass" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the custom member reader class. Must implement the
          mondrian.rolap.MemberReader interface.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string to be displayed in the user interface. If not specified, the hierarchy's name is used.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this hierarchy. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayFolder" type="xs:string"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Specifies the folder in which to list the hierarchy for users.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute> <!-- New -->
    <xs:attribute name="uniqueKeyLevelName" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Should be set to the level (if such a level exists) at which depth it is known that all members
          have entirely unique rows, allowing SQL GROUP BY clauses to be completely eliminated from the query.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="origin" type="xs:unsignedShort">  <!-- New --> <!-- TODO check what this is... what values should be settable. type inferred from mondrian.xmla.RowsetDefinition class.  -->
      <xs:annotation>
        <xs:documentation>
          A bit mask that determines the source of the hierarchy:
          MD_ORIGIN_USER_DEFINED identifies levels in a user defined hierarchy (0x0000001).
          MD_ORIGIN_ATTRIBUTE identifies levels in an attribute hierarchy (0x0000002).
          MD_ORIGIN_INTERNAL identifies levels in attribute hierarchies that are not enabled (0x0000004).
          MD_ORIGIN_KEY_ATTRIBUTE identifies levels in a key attribute hierarchy (0x0000008).

          The default value is MD_ORIGIN_USER_DEFINED. For Measure it is MD_ORIGIN_ATTRIBUTE &amp; MD_ORIGIN_INTERNAL (0x0000006)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:group ref="RelationOrJoinGroup" minOccurs="0"> <!-- TODO check -->
        <xs:annotation>
          <xs:documentation>
            The Table, Join (set of tables), View (SQL statement), or InlineTable which populates this hierarchy.
          </xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:element name="Level" type="LevelType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs="1" when on MondrianDef its optional -->
      <xs:element name="MemberReaderParameter" type="MemberReaderParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CubeType">

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the cube's name. Can be localized from Properties
          file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Whether this cube is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this cube. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMeasure" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the measure that would be taken as the default measure of the cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cache" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Should the Fact table data for this Cube be cached by Mondrian or not.
          The default action is to cache the data.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether element is enabled - if true, then the Cube is realized
          otherwise it is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:group ref="RelationGroup" minOccurs="1" maxOccurs="1"> <!-- New : the used group in the other xsd is named FactTable and did not include the InlineTable element -->
        <xs:annotation>
          <xs:documentation>
            The element from this group will represent the fact table of the cube.
            The fact table is the source of all measures in this cube.
            If this is a Table and the schema name is not present, table name is left unqualified.
          </xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:choice minOccurs="1" maxOccurs="unbounded"> <!-- TODO check minOccurs="1" as MondrianDef does not require a Cube to have Dimensions -->
        <!-- Dimensions -->
        <xs:annotation>
          <xs:documentation>
            Dimensions available to be used by this cube.
          </xs:documentation>
          <xs:element name="Dimension" type="DimensionType"/>
          <xs:element name="DimensionUsage" type="DimensionUsageType"/>
          <xs:element name="VirtualCubeDimension" type="VirtualCubeDimensionType"/> <!-- New --> <!-- TODO check if this should be here. It was NOT in the other xsd but MondrianDef allows for it. Also doesnt seem to make sense to have it and the comments for the CubeDimension say it can only be a shared or private dimension. -->
        </xs:annotation>
      </xs:choice>
      <xs:element name="Measure" type="MeasureType" minOccurs="1" maxOccurs="unbounded"> <!-- TODO minOccurs="1" when on MondrianDef its optional -->
        <xs:annotation>
          <xs:documentation>
            Measure available to be used by this cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CalculatedMember" type="CalculatedMemberType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Calculated members in this cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NamedSet" type="NamedSetType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Named sets in this virtual cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="VirtualCubeType">
    <xs:annotation>
      <xs:documentation>
        A VirtualCube is a set of dimensions and measures gleaned from other cubes.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="enabled" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this element is enabled - if true, then the Virtual Cube is realized otherwise it is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required"/> <!-- TODO check if this is required. It was in the other xsd but is optional in MondrianDef -->
    <xs:attribute name="defaultMeasure" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the measure that would be taken as the default measure of the cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the cube's name. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true"> <!-- New --> <!-- TODO check if we keep this -->
      <xs:annotation>
        <xs:documentation>
          Whether this cube is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this virtual cube. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="CubeUsages" type="CubeUsagesType" minOccurs="1"> <!-- TODO check minOccurs="1" as MondrianDef does not require a VirtualCube to have CubeUsages -->
        <xs:annotation>
          <xs:documentation>
            List of base cubes used by the virtual cube.
          </xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CubeUsage" minOccurs="1" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="cubeName" type="xs:string" use="required">
                  <xs:annotation>
                    <xs:documentation>
                      Name of the cube which the virtualCube uses.
                    </xs:documentation>
                  </xs:annotation>
                </xs:attribute>
                <xs:attribute name="ignoreUnrelatedDimensions" type="xs:boolean" default="false" use="optional">
                  <xs:annotation>
                    <xs:documentation>
                      Unrelated dimensions to measures in this cube will be pushed to top level member.
                    </xs:documentation>
                  </xs:annotation>
                </xs:attribute>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="VirtualCubeDimension" type="VirtualCubeDimensionType" minOccurs="1" maxOccurs="unbounded"> <!-- TODO check minOccurs="1" as MondrianDef does not require a VirtualCube to have VirtualCubeDimensions -->
        <xs:annotation>
          <xs:documentation>
            A VirtualCubeDimension is a usage of a Dimension in a VirtualCube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="VirtualCubeMeasure" type="VirtualCubeMeasureType" minOccurs="1" maxOccurs="unbounded"> <!-- TODO check if minOccurs="1" is correct. It was in the other xsd but is optional in MondrianDef -->
        <xs:annotation>
          <xs:documentation>
            A VirtualCubeMeasure is a usage of a Measure in a VirtualCube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CalculatedMember" type="CalculatedMemberType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Calculated members that belong to this virtual cube.
            (Calculated members inherited from other cubes should not be in this list).
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NamedSet" type="NamedSetType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Named sets in this virtual cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CubeUsagesType">
    <xs:annotation>
      <xs:documentation>
        List of base cubes used by the virtual cube.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="CubeUsage" type="CubeUsageType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CubeUsageType">
    <xs:attribute name="cubeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of the cube which the virtualCube uses.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnrelatedDimensions" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>
          Unrelated dimensions to measures in this cube will be pushed to top level member.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VirtualCubeDimensionType">
    <!-- TODO validate is this Dimension Type should inherit from CubeDimensionType like others. According to MondrianDef it does. -->
    <xs:annotation>
      <xs:documentation>
        A VirtualCubeDimension is a usage of a Dimension in a VirtualCube.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="cubeName" type="xs:string"> <!-- TODO probably should be required -->
      <xs:annotation>
        <xs:documentation>
          Name of the cube which the dimension belongs to, or unspecified if the dimension is shared.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string"> <!-- TODO probably should be required -->
      <xs:annotation>
        <xs:documentation>
          Name of the dimension.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VirtualCubeMeasureType">
    <xs:annotation>
      <xs:documentation>
        A VirtualCubeMeasure is a usage of a Measure in a VirtualCube.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="cubeName" type="xs:string" use="required"> <!-- TODO not required in MondrianDef -->
      <xs:annotation>
        <xs:documentation>
          Name of the cube which the measure belongs to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required"> <!-- TODO not required in MondrianDef -->
      <xs:annotation>
        <xs:documentation>
          Unique name of the measure within its cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this member is visible in the user-interface. Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DimensionUsageType">
    <xs:annotation>
      <xs:documentation>
        A DimensionUsage is usage of a shared Dimension within the context of a cube.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CubeDimensionType"> <!-- TODO validate that this Dimension type should inherit from CubeDimensionType. Or just pick the appropriate attributes and elements. -->
        <xs:attribute name="source" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>
              Name of the source dimension. Must be a dimension in this schema. Case-sensitive.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="level" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              Name of the level to join to. If not specified, joins to the lowest level of the dimension.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="usagePrefix" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              If present, then this is prepended to the Dimension column names
              during the building of collapse dimension aggregates allowing 1) different
              dimension usages to be disambiguated during aggregate table recognition and
              2) multiple shared dimensions that have common column names to be disambiguated.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RoleType">
    <xs:annotation>
      <xs:documentation>
        A role defines an access-control profile. It has a series of grants
        (or denials) for schema elements.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required" />

    <xs:sequence>
      <xs:element name="annotations" type="AnnotationsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Contains values of user-defined properties.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="schemaGrant" type="SchemaGrantType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="union" type="UnionType" minOccurs="0"/>
      <xs:element name="member" type="RoleMemberType" minOccurs="0" maxOccurs="unbounded" /> <!-- TODO only present in XOM -->
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SchemaGrantType">
    <xs:annotation>
      <xs:documentation>
        Grants (or denies) this role access to this schema. access may be "all", "all_dimensions", or "none".
        If access is "all_dimensions", the role has access to all dimensions but still needs explicit access to cubes.
        See mondrian.olap.Role#grant(mondrian.olap.Schema,int).
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="access" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Values correspond to Access.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string"> <!-- TODO mondrian.xml says to have the three values in the comments, but doesn't have all_dimensions in the definition. XOM also has custom -->
          <xs:enumeration value="all"/>
          <xs:enumeration value="all_dimensions"/>
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>

    <xs:sequence>
      <xs:element name="cubeGrants" type="CubeGrantType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CubeGrantType">
    <xs:annotation>
      <xs:documentation>
        Grants (or denies) this role access to a cube.
        <code>access</code> may be "all", "custom", or "none".
        If <code>access</code> is "custom", no access will be inherited
        by the dimensions of this cube, unless the parent SchemaGrant is
        set to "ALL_DIMENSIONS".
        See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Cube, int)">mondrian.olap.Role#grant(mondrian.olap.Cube,int)</a>.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="access" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Values correspond to Access.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string"> <!-- TODO mondrian.xml says to have "all" or "none", XOM also has "custom", MondrianDef has all 4 options -->
          <xs:enumeration value="all"/>
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="cube" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The unique name of the cube
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:sequence>
      <xs:element name="dimensionGrants" type="DimensionGrantType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="hierarchyGrants" type="HierarchyGrantType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DimensionGrantType">
    <xs:annotation>
      <xs:documentation>
        Grants (or denies) this role access to a dimension.
        <code>access</code> may be "all", "custom" or "none".
        Note that a role is implicitly given access to a dimension when it
        is given "ALL" acess to a cube.
        If <code>access</code> is "custom", no access will be inherited
        by the hierarchies of this dimension.
        If the parent schema <code>access</code> is "ALL_DIMENSIONS",
        this dimension will inherit <code>access</code> "ALL".
        See also the "all_dimensions" option of the "SchemaGrant" element.
        See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Dimension, int)">mondrian.olap.Role#grant(mondrian.olap.Dimension,int)</a>.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="access" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Values correspond to Access.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string"> <!-- TODO mondrian.xml says to have "all" or "none", XOM also has "custom", MondrianDef has all 4 options -->
          <xs:enumeration value="all"/>
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="dimension" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The unique name of the dimension
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="HierarchyGrantType">
    <xs:annotation>
      <xs:documentation>
        Grants (or denies) this role access to a hierarchy.
        <code>access</code> may be "all", "custom" or "none".
        If <code>access</code> is "custom", you may also specify the
        attributes <code>topLevel</code>, <code>bottomLevel</code>, and
        the member grants.
        If <code>access</code> is "custom", the child levels of this
        hierarchy will not inherit access rights from this hierarchy,
        should there be no explicit rules defined for the said child level.
        See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Hierarchy, int, mondrian.olap.Level)">mondrian.olap.Role#grant(mondrian.olap.Hierarchy, int, mondrian.olap.Level)</a>.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="access" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Values correspond to Access.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string"> <!-- TODO mondrian.xml and XOM say to have "all", "custom" and "none",MondrianDef also has "all_dimensions" -->
          <xs:enumeration value="all"/>
          <xs:enumeration value="custom"/>
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="hierarchy" type="xs:string" use="required">
        <xs:annotation>
            <xs:documentation>
                The unique name of the hierarchy
            </xs:documentation>
        </xs:annotation>
    </xs:attribute>
    <xs:attribute name="topLevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Unique name of the highest level of the hierarchy from which
          this role is allowed to see members. May only be specified if
          the <code>HierarchyGrant.access</code> is "custom". If not
          specified, role can see members up to the top level.el.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bottomLevel" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Unique name of the lowest level of the hierarchy from which
          this role is allowed to see members. May only be specified if
          the <code>HierarchyGrant.access</code> is "custom". If not
          specified, role can see members down to the leaf level.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rollupPolicy" type="xs:string" default="full">
      <xs:annotation>
        <xs:documentation>
          Policy which determines how cell values are calculated if not all the children of the current cell are visible to the current role.
          Allowable values are 'full' (the default), 'partial', and 'hidden'.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="full"/>
          <xs:enumeration value="partial"/>
          <xs:enumeration value="hidden"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:sequence>
      <xs:element name="memberGrants" type="MemberGrantType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MemberGrantType">
    <xs:annotation>
      <xs:documentation>
        Grants (or denies) this role access to a member.
        The children of this member inherit that access.
        You can implicitly see a member if you can see any of its children.
        See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Member, int)">mondrian.olap.Role#grant(mondrian.olap.Member,int)</a>.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="access" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Values correspond to Access.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="all"/>
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="member" type="xs:string" use="required"> <!-- TODO only required in XOM -->
      <xs:annotation>
        <xs:documentation>
          The unique name of the member
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RoleMemberType">
    <xs:annotation>
      <xs:documentation>
          User name or member group name.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" use="required"/>
  </xs:complexType>

  <xs:complexType name="UnionType">
    <xs:annotation>
      <xs:documentation>
        Body of a Role definition which defines a Role to be the union
        of several Roles. The RoleUsage elements must refer to Roles that
        have been declared earlier in this schema file.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="roleUsages" type="RoleUsageType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs 1 in mondrian.xsd -->
    </xs:sequence>
  </xs:complexType>

  <!-- endregion: Types Up from here are processed -->

  <!--region: processing elements region ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->


  <!-- endregion  ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->





  <xs:group name="RelationGroup">
    <xs:choice>
        <xs:element name="Table" type="TableType"/>
        <xs:element name="View" type="ViewType"/>
        <xs:element name="InlineTable" type="InlineTableType"/>
    </xs:choice>
  </xs:group>

  <xs:group name="RelationOrJoinGroup" >
    <xs:choice>
      <xs:group ref="RelationGroup"/> <!-- TODO check this group within a group for choices. In the other xsd everything is "flat" and the top group is named Relation -->
      <xs:element name="Join" type="JoinType"/>
    </xs:choice>
  </xs:group>

  <xs:complexType name="InlineTableType">
    <xs:sequence>
      <xs:element name="alias" type="xs:string" minOccurs="0"/>
      <xs:element name="columnDefs" type="columnDefs" minOccurs="0"/>
      <xs:element name="rows" type="rows" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="TableType">
        <xs:sequence>
          <xs:element name="name" type="xs:string" minOccurs="0"/>
          <xs:element name="schema" type="xs:string" minOccurs="0"/>
          <xs:element name="alias" type="xs:string" minOccurs="0"/>
          <xs:element name="filter" type="sql" minOccurs="0"/>
          <xs:element name="aggExcludes" type="aggExclude" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="aggTables" type="aggTable" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="tableHints" type="hint" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ViewType">
    <xs:sequence>
      <xs:element name="alias" type="xs:string" minOccurs="0"/>
      <xs:element name="selects" type="sql" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="JoinType">
    <xs:sequence>
      <xs:element name="leftAlias" type="xs:string" minOccurs="0"/>
      <xs:element name="leftKey" type="xs:string" minOccurs="0"/>
      <xs:element name="rightAlias" type="xs:string" minOccurs="0"/>
      <xs:element name="rightKey" type="xs:string" minOccurs="0"/>
      <xs:element name="left" type="relationOrJoin" minOccurs="0"/>
      <xs:element name="right" type="relationOrJoin" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>





  <xs:complexType name="NamedSetType">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="caption" type="xs:string" minOccurs="0"/>
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <xs:element name="formula" type="xs:string" minOccurs="0"/>
      <xs:element name="annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="formulaElement" type="formula" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>





















  <xs:complexType name="propertyFormatter">
    <xs:complexContent>
      <xs:extension base="elementFormatter">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="elementFormatter" abstract="true">
    <xs:sequence>
      <xs:element name="className" type="xs:string" minOccurs="0"/>
      <xs:element name="script" type="script" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="script">
    <xs:sequence>
      <xs:element name="language" type="xs:string" minOccurs="0"/>
      <xs:element name="cdata" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="memberFormatter">
    <xs:complexContent>
      <xs:extension base="elementFormatter">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="cellFormatter">
    <xs:complexContent>
      <xs:extension base="elementFormatter">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>





  <xs:complexType name="UserDefinedFunctionType">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="className" type="xs:string" minOccurs="0"/>
      <xs:element name="script" type="script" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="RoleUsageType">
    <xs:sequence>
      <xs:element name="roleName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="measureExpression">
    <xs:complexContent>
      <xs:extension base="expressionView">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="expressionView" abstract="true">
    <xs:sequence>
      <xs:element name="expressions" type="sql" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="sql">
    <xs:sequence>
      <xs:element name="dialect" type="xs:string" minOccurs="0"/>
      <xs:element name="cdata" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="captionExpression">
    <xs:sequence/>
  </xs:complexType>

  <xs:complexType name="nameExpression">
    <xs:sequence/>
  </xs:complexType>

  <xs:complexType name="ordinalExpression">
    <xs:sequence/>
  </xs:complexType>

  <xs:complexType name="parentExpression">
    <xs:complexContent>
      <xs:extension base="expressionView">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="keyExpression">
    <xs:complexContent>
      <xs:extension base="expressionView">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="column">
    <xs:sequence>
      <xs:element name="table" type="xs:string" minOccurs="0"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggMeasure">
    <xs:sequence>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="rollupType" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggLevelProperty">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggLevel">
    <xs:sequence>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
      <xs:element name="ordinalColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="captionColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="nameColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="collapsed" type="xs:boolean" minOccurs="0"/>
      <xs:element name="properties" type="aggLevelProperty" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggForeignKey">
    <xs:sequence>
      <xs:element name="factColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="aggColumn" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggIgnoreColumn">
    <xs:complexContent>
      <xs:extension base="aggColumnName">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="aggColumnName" abstract="true">
    <xs:sequence>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggMeasureFactCount">
    <xs:sequence>
      <xs:element name="factColumn" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggFactCount">
    <xs:complexContent>
      <xs:extension base="aggColumnName">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="aggExclude">
    <xs:sequence>
      <xs:element name="pattern" type="xs:string" minOccurs="0"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="ignorecase" type="xs:boolean" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggPattern">
    <xs:complexContent>
      <xs:extension base="aggTable">
        <xs:sequence>
          <xs:element name="pattern" type="xs:string" minOccurs="0"/>
          <xs:element name="excludes" type="aggExclude" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="aggTable" abstract="true">
    <xs:sequence>
      <xs:element name="ignorecase" type="xs:boolean" minOccurs="0"/>
      <xs:element name="factcount" type="aggFactCount" minOccurs="0"/>
      <xs:element name="measuresfactcount" type="aggMeasureFactCount" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="ignoreColumns" type="aggIgnoreColumn" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="foreignKeys" type="aggForeignKey" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="measures" type="aggMeasure" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="levels" type="aggLevel" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aggName">
    <xs:complexContent>
      <xs:extension base="aggTable">
        <xs:sequence>
          <xs:element name="name" type="xs:string" minOccurs="0"/>
          <xs:element name="approxRowCount" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="value">
    <xs:sequence>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
      <xs:element name="cdata" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="row">
    <xs:sequence>
      <xs:element name="values" type="value" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="rows">
    <xs:sequence>
      <xs:element name="array" type="row" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="columnDef">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="type" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="columnDefs">
    <xs:sequence>
      <xs:element name="array" type="columnDef" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>





  <xs:complexType name="hint">
    <xs:sequence>
      <xs:element name="type" type="xs:string" minOccurs="0"/>
      <xs:element name="cdata" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>







  <xs:complexType name="MemberReaderParameterType">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="value" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="formula">
    <xs:sequence>
      <xs:element name="cdata" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>



  <xs:complexType name="calculatedMemberProperty">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="caption" type="xs:string" minOccurs="0"/>
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <xs:element name="expression" type="xs:string" minOccurs="0"/>
      <xs:element name="value" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CalculatedMemberType">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="formatString" type="xs:string" minOccurs="0"/>
      <xs:element name="caption" type="xs:string" minOccurs="0"/>
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <xs:element name="formula" type="xs:string" minOccurs="0"/>
      <xs:element name="dimension" type="xs:string" minOccurs="0"/>
      <xs:element name="hierarchy" type="xs:string" minOccurs="0"/>
      <xs:element name="parent" type="xs:string" minOccurs="0"/>
      <xs:element name="visible" type="xs:boolean" minOccurs="0"/>
      <xs:element name="annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="formulaElement" type="formula" minOccurs="0"/>
      <xs:element name="cellFormatter" type="cellFormatter" minOccurs="0"/>
      <xs:element name="memberProperties" type="calculatedMemberProperty" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MeasureType">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
      <xs:element name="datatype" type="xs:string" minOccurs="0"/>
      <xs:element name="formatString" type="xs:string" minOccurs="0"/>
      <xs:element name="aggregator" type="xs:string" minOccurs="0"/>
      <xs:element name="formatter" type="xs:string" minOccurs="0"/>
      <xs:element name="caption" type="xs:string" minOccurs="0"/>
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <xs:element name="visible" type="xs:boolean" minOccurs="0"/>
      <xs:element name="annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="measureExp" type="measureExpression" minOccurs="0"/>
      <xs:element name="cellFormatter" type="cellFormatter" minOccurs="0"/>
      <xs:element name="memberProperties" type="calculatedMemberProperty" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="property">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
      <xs:element name="type" type="xs:string" minOccurs="0"/>
      <xs:element name="formatter" type="xs:string" minOccurs="0"/>
      <xs:element name="caption" type="xs:string" minOccurs="0"/>
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <xs:element name="dependsOnLevelValue" type="xs:boolean" minOccurs="0"/>
      <xs:element name="propertyFormatter" type="propertyFormatter" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="closure">
    <xs:sequence>
      <xs:element name="parentColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="childColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="table" type="TableType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="LevelType">
    <xs:sequence>
      <xs:element name="approxRowCount" type="xs:string" minOccurs="0"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="visible" type="xs:boolean" minOccurs="0"/>
      <xs:element name="table" type="xs:string" minOccurs="0"/>
      <xs:element name="column" type="xs:string" minOccurs="0"/>
      <xs:element name="nameColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="ordinalColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="parentColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="nullParentValue" type="xs:string" minOccurs="0"/>
      <xs:element name="type" type="xs:string" minOccurs="0"/>
      <xs:element name="internalType" type="xs:string" minOccurs="0"/>
      <xs:element name="uniqueMembers" type="xs:boolean" minOccurs="0"/>
      <xs:element name="levelType" type="xs:string" minOccurs="0"/>
      <xs:element name="hideMemberIf" type="xs:string" minOccurs="0"/>
      <xs:element name="formatter" type="xs:string" minOccurs="0"/>
      <xs:element name="caption" type="xs:string" minOccurs="0"/>
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <xs:element name="captionColumn" type="xs:string" minOccurs="0"/>
      <xs:element name="annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="keyExp" type="keyExpression" minOccurs="0"/>
      <xs:element name="nameExp" type="nameExpression" minOccurs="0"/>
      <xs:element name="captionExp" type="captionExpression" minOccurs="0"/>
      <xs:element name="ordinalExp" type="ordinalExpression" minOccurs="0"/>
      <xs:element name="parentExp" type="parentExpression" minOccurs="0"/>
      <xs:element name="memberFormatter" type="memberFormatter" minOccurs="0"/>
      <xs:element name="closure" type="closure" minOccurs="0"/>
      <xs:element name="properties" type="property" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

</xs:schema>

